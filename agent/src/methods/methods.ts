import type { TSchema } from '@sinclair/typebox';
import type { HandlerFunction } from '../schemaValidation.ts';

import { handleCheckFileStatus } from './checkFileStatus.ts';
import { handleCheckStatus } from './checkStatus.ts';
import { handleConversationAgents } from './conversation/conversationAgents.ts';
import { handleConversationCodeCopy } from './conversation/conversationCodeCopy.ts';
import { handleConversationCodeInsert } from './conversation/conversationCodeInsert.ts';
import { handleConversationCreate } from './conversation/conversationCreate.ts';
import { handleConversationDestroy } from './conversation/conversationDestroy.ts';
import { handleConversationPersistence } from './conversation/conversationPersistence.ts';
import { handleConversationPreconditions } from './conversation/conversationPreconditions.ts';
import { handleConversationRating } from './conversation/conversationRating.ts';
import { handleConversationTemplates } from './conversation/conversationTemplates.ts';
import { handleConversationTurnDelete } from './conversation/conversationTurnDelete.ts';
import { handleConversationTurn } from './conversation/conversationTurn.ts';
import { handleCopilotCodeReview } from './copilotCodeReview.ts';
import { handleEditConversationCreate } from './copilotEdits/editConversationCreate.ts';
import { handleEditConversationDestroy } from './copilotEdits/editConversationDestroy.ts';
import { handleEditConversationTurnDelete } from './copilotEdits/editConversationTurnDelete.ts';
import { handleEditConversationTurn } from './copilotEdits/editConversationTurn.ts';
import { handleCopilotModelsPolicy } from './copilotModelsPolicy.ts';
import { handleCopilotModels } from './copilotModels.ts';
import * as copilotPanelCompletion from './copilotPanelCompletion.ts';
import { handleDiagnostics } from './debug/diagnostics.ts';
import { handleGetCompletions, handleGetCompletionsCycling } from './getCompletions.ts';
import { handleGetPanelCompletions } from './getPanelCompletions.ts';
import { handleGetVersion } from './getVersion.ts';
import { handleGitCommitGenerate } from './gitCommitGenerate.ts';
import * as inlineCompletionPrompt from './inlineCompletionPrompt.ts';
import * as inlineCompletion from './inlineCompletion.ts';
import { handleListCertificates } from './listCertificates.ts';
import { notifyAccepted } from './notifyAccepted.ts';
import { notifyRejected } from './notifyRejected.ts';
import { notifyShown } from './notifyShown.ts';
import { handleRegisterContextProviders } from './registerContextProviders.ts';
import { handleSetEditorInfo } from './setEditorInfo.ts';
import { handleSignInConfirm } from './signInConfirm.ts';
import { handleSignInInitiate } from './signInInitiate.ts';
import { handleSignInWithGithubToken } from './signInWithGithubToken.ts';
import { handleSignOut } from './signOut.ts';
import { handleTelemetryAuthNotifyDismissed } from './telemetry/authNotifyDismissed.ts';
import { handleTelemetryAuthNotifyShown } from './telemetry/authNotifyShown.ts';
import { handleTelemetryGitHubLoginSuccess } from './telemetry/gitHubLoginSuccess.ts';
import { handleTelemetryNewGitHubLogin } from './telemetry/newGitHubLogin.ts';
import { handleTelemetryException } from './telemetryTrack.ts';
import { handleTestingAlwaysAuth } from './testing/alwaysAuth.ts';
import { handleChatML } from './testing/chatML.ts';
import { handleTestingFetch } from './testing/fetch.ts';
import { handleTestingFlushPromiseQueue } from './testing/flushPromiseQueue.ts';
import { handleGetDocument } from './testing/getDocument.ts';
import { handleTestingGetTelemetry } from './testing/getTelemetry.ts';
import { handleTestingNeverAuth } from './testing/neverAuth.ts';
import { handleTestingOverrideExpFlags } from './testing/overrideExpFlags.ts';
import { handleTestingSetCompletionDocuments } from './testing/setCompletionDocuments.ts';
import { handleTestingSetContentExclusionRules } from './testing/setContentExclusionRules.ts';
import { handleTestingSetCopilotEditsResponse } from './testing/setCopilotEditsResponse.ts';
import { handleTestingSetPanelCompletionDocuments } from './testing/setPanelCompletionDocuments.ts';
import { handleTestingSetSyntheticTurns } from './testing/setSyntheticTurns.ts';
import { handleTestingSetTelemetryCapture } from './testing/setTelemetryCapture.ts';
import { handleTriggerShowMessage } from './testing/triggerShowMessage.ts';
import { handleTestingUseTestingToken } from './testing/useTestingToken.ts';
import { handleUninstall } from './uninstall.ts';
import { handleUnregisterContextProviders } from './unregisterContextProviders.ts';
import { handleVerifyCertificate } from './verifyCertificate.ts';
import { handleVerifyKerberos } from './verifyKerberos.ts';
import { handleVerifyState } from './verifyState.ts';
import { handleVerifyWorkspaceState } from './verifyWorkspaceState.ts';

type MethodName = string;

type HandlerFunctionType = HandlerFunction<TSchema, unknown, unknown>;

function getAllMethods(): MethodHandlers {
  const methods = new Map<MethodName, HandlerFunctionType>();
  methods.set(inlineCompletionPrompt.type.method, inlineCompletionPrompt.handle);
  methods.set(inlineCompletion.type.method, inlineCompletion.handle);
  methods.set('getCompletions', handleGetCompletions);
  methods.set('getCompletionsCycling', handleGetCompletionsCycling);
  methods.set('getPanelCompletions', handleGetPanelCompletions);
  methods.set(copilotPanelCompletion.type.method, copilotPanelCompletion.handle);
  methods.set('getVersion', handleGetVersion);
  methods.set('setEditorInfo', handleSetEditorInfo);
  methods.set('checkStatus', handleCheckStatus);
  methods.set('checkFileStatus', handleCheckFileStatus);
  methods.set('signInInitiate', handleSignInInitiate);
  methods.set('signIn', handleSignInInitiate);
  methods.set('signInConfirm', handleSignInConfirm);
  methods.set('signInWithGithubToken', handleSignInWithGithubToken);
  methods.set('signOut', handleSignOut);
  methods.set('notifyShown', notifyShown);
  methods.set('notifyAccepted', notifyAccepted);
  methods.set('notifyRejected', notifyRejected);
  methods.set('telemetry/exception', handleTelemetryException);
  methods.set('telemetry/authNotifyDismissed', handleTelemetryAuthNotifyDismissed);
  methods.set('telemetry/authNotifyShown', handleTelemetryAuthNotifyShown);
  methods.set('telemetry/gitHubLoginSuccess', handleTelemetryGitHubLoginSuccess);
  methods.set('telemetry/newGitHubLogin', handleTelemetryNewGitHubLogin);
  methods.set('testing/overrideExpFlags', handleTestingOverrideExpFlags);
  methods.set('testing/alwaysAuth', handleTestingAlwaysAuth);
  methods.set('testing/neverAuth', handleTestingNeverAuth);
  methods.set('testing/useTestingToken', handleTestingUseTestingToken);
  methods.set('testing/setCompletionDocuments', handleTestingSetCompletionDocuments);
  methods.set('testing/setPanelCompletionDocuments', handleTestingSetPanelCompletionDocuments);
  methods.set('testing/triggerShowMessageRequest', handleTriggerShowMessage);
  methods.set('testing/getTelemetry', handleTestingGetTelemetry);
  methods.set('testing/setTelemetryCapture', handleTestingSetTelemetryCapture);
  methods.set('testing/flushPromiseQueue', handleTestingFlushPromiseQueue);
  methods.set('testing/getDocument', handleGetDocument);
  methods.set('testing/chatml', handleChatML);
  methods.set('testing/setSyntheticTurns', handleTestingSetSyntheticTurns);
  methods.set('testing/fetch', handleTestingFetch);
  methods.set('testing/setContentExclusionRules', handleTestingSetContentExclusionRules);
  methods.set('testing/setCopilotEditsResponse', handleTestingSetCopilotEditsResponse);
  methods.set('uninstall', handleUninstall);
  methods.set('debug/diagnostics', handleDiagnostics);
  methods.set('debug/listCertificates', handleListCertificates);
  methods.set('debug/verifyState', handleVerifyState);
  methods.set('debug/verifyCertificate', handleVerifyCertificate);
  methods.set('debug/verifyKerberos', handleVerifyKerberos);
  methods.set('debug/verifyWorkspaceState', handleVerifyWorkspaceState);
  methods.set('context/registerProviders', handleRegisterContextProviders);
  methods.set('context/unregisterProviders', handleUnregisterContextProviders);
  methods.set('conversation/preconditions', handleConversationPreconditions);
  methods.set('conversation/persistence', handleConversationPersistence);
  methods.set('conversation/create', handleConversationCreate);
  methods.set('conversation/turn', handleConversationTurn);
  methods.set('conversation/turnDelete', handleConversationTurnDelete);
  methods.set('conversation/destroy', handleConversationDestroy);
  methods.set('conversation/rating', handleConversationRating);
  methods.set('conversation/copyCode', handleConversationCodeCopy);
  methods.set('conversation/insertCode', handleConversationCodeInsert);
  methods.set('conversation/templates', handleConversationTemplates);
  methods.set('conversation/agents', handleConversationAgents);
  methods.set('copilot/models', handleCopilotModels);
  methods.set('copilot/setModelPolicy', handleCopilotModelsPolicy);
  methods.set('copilot/codeReview', handleCopilotCodeReview);
  methods.set('git/commitGenerate', handleGitCommitGenerate);
  methods.set('editConversation/create', handleEditConversationCreate);
  methods.set('editConversation/turn', handleEditConversationTurn);
  methods.set('editConversation/turnDelete', handleEditConversationTurnDelete);
  methods.set('editConversation/destroy', handleEditConversationDestroy);
  return new MethodHandlers(methods);
}

class MethodHandlers {
  constructor(readonly handlers: Map<MethodName, HandlerFunctionType>) {}
}

export { MethodHandlers, getAllMethods };
